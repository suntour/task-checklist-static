{"version":3,"sources":["components/tasklist/Task.js","components/tasklist/TaskForm.js","components/tasklist/TaskList.js","components/timer/Clock.js","App.js","serviceWorker.js","index.js"],"names":["Task","tasks","completeTask","removeTask","updateTask","useState","open","setOpen","id","text","edit","setEdit","submitUpdate","handleClose","handleChange","e","target","value","handleClickOpen","map","task","index","key","className","isComplete","Grid","container","justify","alignItems","spacing","item","xs","Button","variant","onClick","IconButton","fontSize","Dialog","onClose","aria-labelledby","PaperProps","style","backgroundColor","boxShadow","DialogTitle","DialogContent","TextField","autoFocus","margin","label","onChange","fullWidth","DialogActions","color","aria-label","TaskForm","props","input","setInput","onSubmit","preventDefault","Math","floor","random","Input","type","placeholder","name","resetTasks","TaskList","setTasks","Paper","test","newTasks","console","log","resettedTasks","t","updatedTasks","arrWithoutRemovedTask","filter","taskId","newValue","FormattedDate","resetHour","timeTilReset","resetMinutes","resetSeconds","date","toLocaleTimeString","offsetText","getTimeTilResetInMillis","currentDate","resetTime","Date","getHours","getResetTime","parse","hours","nextDay","newDate","setDate","getDate","setHours","setMinutes","setMilliseconds","getOffsetText","offset","getTimezoneOffset","offsetHours","offsetMins","abs","Clock","state","this","timerID","setInterval","tick","clearInterval","setState","React","Component","App","elevation","Card","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60790ce5.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Task.css\";\r\nimport {\r\n  Button,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogContent,\r\n  DialogTitle,\r\n  Grid,\r\n  IconButton,\r\n  TextField,\r\n} from \"@material-ui/core\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nfunction Task({ tasks, completeTask, removeTask, updateTask }) {\r\n  const [open, setOpen] = useState(false);\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    text: \"\",\r\n  });\r\n\r\n  const submitUpdate = () => {\r\n    updateTask(edit.id, edit.text);\r\n    setEdit({\r\n      id: null,\r\n      text: \"\",\r\n    });\r\n    handleClose();\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setEdit({\r\n      id: edit.id,\r\n      text: e.target.value,\r\n    });\r\n  };\r\n\r\n  const openDialog = (id) => {\r\n    setEdit({\r\n      id: id,\r\n      text: \"\",\r\n    });\r\n    handleClickOpen();\r\n  };\r\n\r\n  const handleClickOpen = () => {\r\n    setOpen(true);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  return tasks.map((task, index) => (\r\n    <div\r\n      key={index}\r\n      className={task.isComplete ? \"task-row complete\" : \"task-row\"}\r\n    >\r\n      <Grid container justify=\"center\" alignItems=\"center\" spacing={0}>\r\n        <Grid item xs={5}>\r\n          <Button\r\n            className=\"task-button\"\r\n            variant=\"contained\"\r\n            key={task.id}\r\n            onClick={() => completeTask(task.id)}\r\n          >\r\n            {task.text}\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n          <IconButton onClick={() => openDialog(task.id)}>\r\n            <EditIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Grid>\r\n\r\n        <Dialog\r\n          open={open}\r\n          onClose={handleClose}\r\n          aria-labelledby=\"form-dialog-title\"\r\n          PaperProps={{\r\n            style: {\r\n              backgroundColor: \"white\",\r\n              boxShadow: \"none\",\r\n            },\r\n          }}\r\n        >\r\n          <DialogTitle id=\"form-dialog-title\">Edit Name</DialogTitle>\r\n          <DialogContent>\r\n            <TextField\r\n              autoFocus\r\n              margin=\"dense\"\r\n              label=\"Please enter a new name\"\r\n              value={edit.text}\r\n              onChange={handleChange}\r\n              fullWidth\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={handleClose} color=\"primary\">\r\n              Cancel\r\n            </Button>\r\n            <Button onClick={submitUpdate} color=\"primary\">\r\n              Save\r\n            </Button>\r\n          </DialogActions>\r\n        </Dialog>\r\n\r\n        <Grid item xs={1}>\r\n          <IconButton\r\n            className=\"delete-button\"\r\n            aria-label=\"delete\"\r\n            onClick={() => removeTask(task.id)}\r\n          >\r\n            <DeleteIcon fontSize=\"small\" />\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  ));\r\n}\r\n\r\nexport default Task;\r\n","import React, { useState } from \"react\";\r\nimport { Button, Grid, IconButton, Input } from \"@material-ui/core\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\n\r\nfunction TaskForm(props) {\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    props.onSubmit({\r\n      id: Math.floor(Math.random() * 1000),\r\n      text: input,\r\n    });\r\n\r\n    setInput(\"\");\r\n  };\r\n\r\n  return (\r\n    <form className=\"task-form\" onSubmit={handleSubmit}>\r\n      <Grid\r\n        container\r\n        className=\"task-form-container\"\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={0}\r\n      >\r\n        <Grid item xs={5}>\r\n          <Input\r\n            type=\"text\"\r\n            placeholder=\"Add a task\"\r\n            name=\"text\"\r\n            value={input}\r\n            onChange={handleChange}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={4}>\r\n          <Button className=\"add-task-button\" type=\"submit\" variant=\"contained\">\r\n            Add Task\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={1}>\r\n          <IconButton className=\"reset-button\" onClick={props.resetTasks}>\r\n            <LoopIcon></LoopIcon>\r\n          </IconButton>\r\n        </Grid>\r\n      </Grid>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TaskForm;\r\n","import React, { useState } from \"react\";\r\nimport Task from \"./Task\";\r\nimport TaskForm from \"./TaskForm\";\r\nimport { Paper } from \"@material-ui/core\";\r\n\r\nfunction TaskList() {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const addTask = (task) => {\r\n    if (!task.text || /^\\s*$/.test(task.text)) {\r\n      return;\r\n    }\r\n\r\n    const newTasks = [task, ...tasks];\r\n\r\n    setTasks(newTasks);\r\n    console.log(...tasks);\r\n  };\r\n\r\n  const completeTask = (id) => {\r\n    let updatedTasks = tasks.map((tasks) => {\r\n      if (tasks.id === id) {\r\n        tasks.isComplete = !tasks.isComplete;\r\n      }\r\n      return tasks;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const removeTask = (id) => {\r\n    const arrWithoutRemovedTask = [...tasks].filter((task) => task.id !== id);\r\n    setTasks(arrWithoutRemovedTask);\r\n  };\r\n\r\n  const updateTask = (taskId, newValue) => {\r\n    if (!newValue || /^\\s*$/.test(newValue)) {\r\n      return;\r\n    }\r\n    var updatedTasks = tasks.map((item) => {\r\n      if (item.id === taskId) {\r\n        item.text = newValue;\r\n      }\r\n      return item;\r\n    });\r\n    setTasks(updatedTasks);\r\n  };\r\n\r\n  const resetTasks = (e) => {\r\n    let resettedTasks = tasks.map((t) => {\r\n      t.isComplete = false;\r\n      return t;\r\n    });\r\n\r\n    setTasks(resettedTasks);\r\n  };\r\n\r\n  return (\r\n    <div className=\"header\">\r\n      <Paper className=\"form-area\">\r\n        <TaskForm onSubmit={addTask} resetTasks={resetTasks}></TaskForm>\r\n      </Paper>\r\n      <div className=\"scroll-area\">\r\n        <Task\r\n          tasks={tasks}\r\n          completeTask={completeTask}\r\n          removeTask={removeTask}\r\n          updateTask={updateTask}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"./Clock.css\";\r\n\r\nfunction FormattedDate(props) {\r\n  var resetHour = Math.floor((props.timeTilReset / (1000 * 60 * 60)) % 24);\r\n  var resetMinutes = Math.floor((props.timeTilReset / 1000 / 60) % 60);\r\n  var resetSeconds = Math.floor((props.timeTilReset / 1000) % 60);\r\n\r\n  return (\r\n    <div>\r\n      <Grid container justify=\"center\">\r\n        <Grid item xs={12} className=\"main-time-text\">\r\n          {props.date.toLocaleTimeString()}\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <div className=\"offset-text\">{props.offsetText}</div>\r\n        </Grid>\r\n        <Grid item xs={10} className=\"reset-section\">\r\n          <div className=\"reset-text\">\r\n            Reset in: {resetHour} hours, {resetMinutes} minutes, and{\" \"}\r\n            {resetSeconds} seconds\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getTimeTilResetInMillis(currentDate) {\r\n  var resetTime = new Date();\r\n  resetTime =\r\n    resetTime.getHours() < 16\r\n      ? getResetTime(resetTime, 20, false)\r\n      : getResetTime(resetTime, 20, true);\r\n\r\n  var timeLeftMillis = resetTime - Date.parse(currentDate);\r\n\r\n  return timeLeftMillis;\r\n\r\n  function getResetTime(date, hours, nextDay) {\r\n    var newDate = date;\r\n\r\n    if (nextDay) {\r\n      newDate.setDate(newDate.getDate() + 1);\r\n    }\r\n    newDate.setHours(hours);\r\n    newDate.setMinutes(0);\r\n    newDate.setMilliseconds(0);\r\n\r\n    return newDate;\r\n  }\r\n}\r\n\r\nfunction getOffsetText(date) {\r\n  const offset = date.getTimezoneOffset();\r\n  const offsetHours = Math.floor(offset / 60);\r\n  var offsetMins = Math.abs(offset % 60);\r\n  if (offsetMins === 0) {\r\n    offsetMins = \"00\";\r\n  }\r\n  var offsetText = offsetHours + \":\" + offsetMins;\r\n  if (offset >= 0) {\r\n    offsetText = \"GMT+\" + offsetText;\r\n  } else {\r\n    offsetText = \"GMT\" + offsetText;\r\n  }\r\n\r\n  return offsetText;\r\n}\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const currentDate = new Date();\r\n    this.state = {\r\n      date: currentDate,\r\n      offsetText: getOffsetText(currentDate),\r\n      timeTilReset: getTimeTilResetInMillis(currentDate),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date(),\r\n      timeTilReset: this.state.timeTilReset - 1000,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"date-area\">\r\n        <FormattedDate\r\n          date={this.state.date}\r\n          offsetText={this.state.offsetText}\r\n          timeTilReset={this.state.timeTilReset}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport TaskList from \"./components/tasklist/TaskList\";\r\nimport Clock from \"./components/timer/Clock\";\r\nimport { Card, Grid, Paper } from \"@material-ui/core\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Grid container justify=\"center\" spacing={3}>\r\n        <Grid item xs={5}>\r\n          <Paper className=\"task-section\" elevation={3}>\r\n            <Card className=\"time-section\" elevation={3}>\r\n              <Clock></Clock>\r\n            </Card>\r\n            <TaskList></TaskList>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}